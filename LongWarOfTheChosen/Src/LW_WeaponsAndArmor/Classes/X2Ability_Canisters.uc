class X2Ability_Canisters extends X2Ability config(GameData_WeaponData);

var config int Canister_Width, Canister_Length, PoisonCanister_Length, PoisonCanister_Width, BlastCanister_Length, BlastCanister_Width SmokeCanister_Width, SmokeCanister_Length, MatchingCanister_DamageBonus;
var config int MedicCanister_MedisprayCharges, MedicCanister_PerTurnSelfRegen, MedicCanister_MaxSelfRegen, MedicCanister_PerTurnBuffRegen, MedicCanister_BuffRegenTurns;
var config float FireCanister_Firechance_Lv1, FireCanister_Firechance_Lv2, FireCanister_Firechance_Lv3;
var config int FireCanister_Charges, FireCanister_BurnDamage, FireCanister_BurnSpread;
var config int PoisonCanister_Charges, PoisonCanister_CloudDuration;
var config int SmokeCanister_Charges, CurseCanister_Charges, BlastCanister_Charges;
var config int BluescreenCanister_Charges, BluescreenCanister_Disorient, BluescreenCanister_RobotStunActions;
var config int AcidCanister_BurnDamage, AcidCanister_BurnSpread, AcidCanister_Charges, AcidCanister_Pierce, AcidCanister_Shred;
var config float FireCanister_Scalar, AcidCanister_Scalar, PoisonCanister_Scalar, CurseCanister_Scalar, BluescreenCanister_Scalar, BluescreenCanister_RoboScalar, BlastCanister_Scalar;

var localized string MedicCanisterBuffLabel, MedicCanisterBuffDesc;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	//Init Abilities are the ones the canisters actually have - they initialize the activation ability if the primary weapon is a chemthrower
	Templates.AddItem(CanisterInitAbility('LWFireCanister','LWFireCanisterActivate','Fire'));
	Templates.AddItem(CanisterInitAbility('LWPoisonCanister','LWPoisonCanisterActivate','Poison', "img:///UILibrary_PerkIcons.UIPerk_viper_poisonspit"));
	Templates.AddItem(CanisterInitAbility('LWIceCanister','LWIceCanisterActivate','Frost', "img:///UILibrary_DLC2Images.UIPerk_freezingbreath"));
	Templates.AddItem(CanisterInitAbility('LWCurseCanister','LWCurseCanisterActivate','Psi'));
	Templates.AddItem(CanisterInitAbility('LWBluescreenCanister','LWBluescreenCanisterActivate','Electrical', "img:///UILibrary_PerkIcons.UIPerk_codex_malfunction"));
	Templates.AddItem(CanisterInitAbility('LWSmokeCanister','LWSmokeCanisterActivate','Smoke', "img:///UILibrary_PerkIcons.UIPerk_smokebomb"));
	Templates.AddItem(CanisterInitAbility('LWBlastCanister','LWBlastCanisterActivate','Explosion', "img:///UILibrary_PerkIcons.UIPerk_bigbooms"));
	Templates.AddItem(CanisterInitAbility('LWAcidCanister','LWAcidCanisterActivate','Acid', "img:///UILibrary_PerkIcons.UIPerk_andromedon_acidblob"));

	Templates.AddItem(MedicCanisterPassive());
	Templates.AddItem(MatchingCanisterPassive());

	//Canister Activations. That is, these are the abilities granted to the chemthrower by the equipped canister.
	Templates.AddItem(FireCanisterActivate()); //fire. burning. fire world. surprise.
	Templates.AddItem(PoisonCanisterActivate()); //poison. poison. poison cloud. bypass shield. gaurented hit?
	Templates.AddItem(BluescreenCanisterActivate()); //electrical, disorient. stun & ignore armour vs robotics.
	Templates.AddItem(BlastCanisterActivate()); //Explosion. high enviromental damage?
	Templates.AddItem(AcidCanisterActivate()); //Acid. shred?
	
	Templates.AddItem(SmokeCanisterActivate()); //no damage. just smoke. also used by medic can.

	
	Templates.AddItem(CurseCanisterActivate()); //bypass sustain. actual effects added by LWPerkPack

	//Templates.AddItem(StimCanisterActivate()); //some sort of offensive buff for allies.

	return Templates;
}

static function X2AbilityTemplate CanisterInitAbility(name TemplateName, name GiveAbility, name DamageType, optional string IconImage = "img:///UILibrary_PerkIcons.UIPerk_flamethrower")
{
	local X2AbilityTemplate				Template;
	local X2Effect_InitCanisterAbility	InitAbility;

	`CREATE_X2ABILITY_TEMPLATE(Template, TemplateName);

	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

//BEGIN AUTOGENERATED CODE: Template Overrides 'Deflect'
	Template.IconImage = IconImage;
	if (DamageType == 'Psi')
	{
		Template.AbilitySourceName = 'eAbilitySource_Psionic';
	}
	else
	{
		Template.AbilitySourceName = 'eAbilitySource_Perk';
	}
//END AUTOGENERATED CODE: Template Overrides 'Deflect'

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);
	
	//effect.
	InitAbility = new class'X2Effect_InitCanisterAbility';
	InitAbility.CanisterAbility = GiveAbility;
	InitAbility.DamageType = DamageType;
	Template.AddTargetEffect(InitAbility);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = none;

	return Template;
}

static function X2AbilityTemplate MedicCanisterPassive()
{
	local X2AbilityTemplate				Template;
	local X2Effect_TeamSpiritBonusCharges					AmmoEffect;
	local X2Effect_Regeneration			RegenEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWMedicCanisterPassive');

	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

//BEGIN AUTOGENERATED CODE: Template Overrides 'Deflect'
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_defend_health";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.bDisplayInUITacticalText = false;
//END AUTOGENERATED CODE: Template Overrides 'Deflect'

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	AmmoEffect = new class'X2Effect_TeamSpiritBonusCharges';
	AmmoEffect.BuildPersistentEffect(1, false, false, , eGameRule_PlayerTurnBegin); 
	AmmoEffect.DuplicateResponse = eDupe_Allow;
	AmmoEffect.NumCharges = default.MedicCanister_MedisprayCharges;
	AmmoEffect.AbilityName = 'LWMedispray';
	Template.AddTargetEffect(AmmoEffect);

	RegenEffect = new class'X2Effect_Regeneration';
	RegenEffect.BuildPersistentEffect(1, true, false, false, eGameRule_PlayerTurnBegin);
	RegenEffect.HealAmount = default.MedicCanister_PerTurnSelfRegen;
	RegenEffect.MaxHealAmount = default.MedicCanister_MaxSelfRegen;
	RegenEffect.HealthRegeneratedName = 'MedicCanister_SelfRegen';
	RegenEffect.EffectName = 'MedicCanister_SelfRegen';
	RegenEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyLongDescription(), Template.IconImage, true, , Template.AbilitySourceName);
	Template.AddTargetEffect(RegenEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = none;

	return Template;
}

static function X2AbilityTemplate MatchingCanisterPassive()
{
	local X2AbilityTemplate				Template;
	local X2Effect_MatchingDamageBonus	Effect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWMatchingCanisterPassive');

	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

//BEGIN AUTOGENERATED CODE: Template Overrides 'Deflect'
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_defend_health";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.bDisplayInUITacticalText = false;
//END AUTOGENERATED CODE: Template Overrides 'Deflect'

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);
	
	Effect = new class'X2Effect_MatchingDamageBonus';
	Effect.BuildPersistentEffect(1, true, false, false, eGameRule_PlayerTurnBegin);
	Effect.Bonus = default.MatchingCanister_DamageBonus;
	Effect.EffectName = 'MatchingCanisterDamageBonus';
	Effect.DuplicateResponse = eDupe_Ignore;
	Effect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyLongDescription(), Template.IconImage, false, , Template.AbilitySourceName);
	Template.AddTargetEffect(Effect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = none;

	return Template;
}

static function X2AbilityTemplate FireCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2Effect_ApplyCanisterDamage		WeaponDamageEffect;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityToHitCalc_StandardAim	StandardAim;
	local X2AbilityCost_Ammo				AmmoCost;
	local X2Effect_ApplyFireToWorld			FireToWorldEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWFireCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_flamethrower";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.FireCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bMultiTargetOnly = true;
	Template.AbilityToHitCalc = StandardAim;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControl');

	Template.bAllowBonusWeaponEffects = true;

	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.Element = 'Fire';
	WeaponDamageEffect.Scalar = default.FireCanister_Scalar;
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	FireToWorldEffect = new class'X2Effect_ApplyFireToWorld';
	FireToWorldEffect.bUseFireChanceLevel = true;
	FireToWorldEffect.bDamageFragileOnly = true;
	FireToWorldEffect.FireChance_Level1 = default.FireCanister_Firechance_Lv1;
	FireToWorldEffect.FireChance_Level2 = default.FireCanister_Firechance_Lv2;
	FireToWorldEffect.FireChance_Level3 = default.FireCanister_Firechance_Lv3;
	FireToWorldEffect.bCheckForLOSFromTargetLocation = false; //The flamethrower does its own LOS filtering
	Template.AddMultiTargetEffect(FireToWorldEffect);

	Template.AddMultiTargetEffect(class'X2StatusEffects'.static.CreateBurningStatusEffect(default.FireCanister_BurnDamage, default.FireCanister_BurnSpread));

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.Canister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.Canister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	Template.bCheckCollision = true;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireMZCanister';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Flamethrower';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 100;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.Hostility = eHostility_Offensive;

	return Template;
}

static function X2AbilityTemplate PoisonCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2Effect_ApplyCanisterDamage		WeaponDamageEffect;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityToHitCalc_StandardAim	StandardAim;
	local X2AbilityCost_Ammo				AmmoCost;
	local X2Effect_ApplyPoisonToWorld		PoisonCloudEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWPoisonCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_viper_poisonspit";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.PoisonCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bMultiTargetOnly = true;
	StandardAim.bGuaranteedHit = true;
	Template.AbilityToHitCalc = StandardAim;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControl');

	Template.bAllowBonusWeaponEffects = true;

	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.Element = 'Poison';
	WeaponDamageEffect.bBypassShields = true;
	WeaponDamageEffect.Scalar = default.PoisonCanister_Scalar;
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	PoisonCloudEffect = new class 'X2Effect_ApplyPoisonToWorld';
	PoisonCloudEffect.Duration = default.PoisonCanister_CloudDuration;
	Template.AddMultiTargetEffect(PoisonCloudEffect);

	Template.AddMultiTargetEffect(class'X2StatusEffects'.static.CreatePoisonedStatusEffect());

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.PoisonCanister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.PoisonCanister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	Template.bCheckCollision = true;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireMZCanister';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Flamethrower';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 100;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.Hostility = eHostility_Offensive;

	return Template;
}

static function X2AbilityTemplate CurseCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2Effect_ApplyCanisterDamage		WeaponDamageEffect;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityToHitCalc_StandardAim	StandardAim;
	local X2AbilityCost_Ammo				AmmoCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWCurseCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_flamethrower";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.CurseCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bMultiTargetOnly = true;
	Template.AbilityToHitCalc = StandardAim;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControl');

	Template.bAllowBonusWeaponEffects = true;

	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.Element = 'Psi';
	WeaponDamageEffect.Scalar = default.CurseCanister_Scalar;
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.Canister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.Canister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	Template.bCheckCollision = false;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireMZCanister';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Flamethrower';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 100;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.Hostility = eHostility_Offensive;

	return Template;
}

static function X2AbilityTemplate BluescreenCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2Effect_ApplyCanisterDamage		WeaponDamageEffect;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityToHitCalc_StandardAim	StandardAim;
	local X2AbilityCost_Ammo				AmmoCost;
	local X2Effect_PersistentStatChange		Disorient;
	local X2Effect_Stunned					RoboStun;
	local X2Condition_UnitProperty			RoboCondition, NonRoboCondition;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWBluescreenCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_codex_malfunction";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.BluescreenCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bMultiTargetOnly = true;
	StandardAim.bGuaranteedHit = true;
	Template.AbilityToHitCalc = StandardAim;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControl');

	Template.bAllowBonusWeaponEffects = true;

	NonRoboCondition = new class'X2Condition_UnitProperty';
	NonRoboCondition.ExcludeRobotic = true;
	NonRoboCondition.ExcludeFriendlyToSource = false;
	
	RoboCondition = new class'X2Condition_UnitProperty';
	RoboCondition.ExcludeOrganic = true;
	RoboCondition.ExcludeFriendlyToSource = false;
	
	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.bIgnoreArmor = true;
	WeaponDamageEffect.Element = 'Electrical';
	WeaponDamageEffect.Scalar = default.BluescreenCanister_Scalar;
	WeaponDamageEffect.TargetConditions.AddItem(NonRoboCondition);
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.Element = 'Electrical';
	WeaponDamageEffect.bIgnoreArmor = true;
	WeaponDamageEffect.Scalar = default.BluescreenCanister_RoboScalar;
	WeaponDamageEffect.TargetConditions.AddItem(RoboCondition);
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	//Disorient = class'X2StatusEffects'.static.CreateDisorientedStatusEffect(false, 0, true);
	//Disorient.iNumTurns = default.BluescreenCanister_Disorient;
	//Template.AddMultiTargetEffect(Disorient);

	RoboStun = class'X2StatusEffects'.static.CreateStunnedStatusEffect( default.BluescreenCanister_RobotStunActions, 100, false);
	RoboStun.TargetConditions.AddItem(RoboCondition);
	Template.AddMultiTargetEffect(RoboStun);

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.Canister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.Canister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	Template.bCheckCollision = true;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireMZCanister';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Volt';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 100;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.DamagePreviewFn = CanisterDamagePreview;
	Template.Hostility = eHostility_Offensive;

	return Template;
}

static function bool CanisterDamagePreview(XComGameState_Ability AbilityState, StateObjectReference TargetRef, out WeaponDamageValue MinDamagePreview, out WeaponDamageValue MaxDamagePreview, out int AllowsShield)
{
	//  return only the damage preview for the organic damage effect
	AbilityState.GetMyTemplate().AbilityMultiTargetEffects[0].GetDamagePreview(TargetRef, AbilityState, false, MinDamagePreview, MaxDamagePreview, AllowsShield);		
	return true;
}

static function X2AbilityTemplate BlastCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2Effect_ApplyCanisterDamage		WeaponDamageEffect;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityToHitCalc_StandardAim	StandardAim;
	local X2AbilityCost_Ammo				AmmoCost;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWBlastCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_bigbooms";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.BlastCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bMultiTargetOnly = true;
	StandardAim.bGuaranteedHit = true;
	Template.AbilityToHitCalc = StandardAim;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControl');

	Template.bAllowBonusWeaponEffects = true;

	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.bExplosiveDamage = true;
	WeaponDamageEffect.Element = 'Explosion';
	WeaponDamageEffect.Scalar = default.BlastCanister_Scalar;
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.BlastCanister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.BlastCanister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	Template.bCheckCollision = true;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireMZCanister';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Flamethrower';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 100;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.Hostility = eHostility_Offensive;

	return Template;
}

static function X2AbilityTemplate AcidCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2Effect_ApplyCanisterDamage		WeaponDamageEffect;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityToHitCalc_StandardAim	StandardAim;
	local X2AbilityCost_Ammo				AmmoCost;
	local MZ_Effect_Knockback 				KnockbackEffect;
	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWAcidCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_andromedon_acidblob";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.AcidCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	StandardAim = new class'X2AbilityToHitCalc_StandardAim';
	StandardAim.bMultiTargetOnly = true;
	StandardAim.bGuaranteedHit = true;
	Template.AbilityToHitCalc = StandardAim;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControl');

	Template.bAllowBonusWeaponEffects = true;

	WeaponDamageEffect = new class'X2Effect_ApplyCanisterDamage';
	WeaponDamageEffect.bIgnoreBaseDamage = true;
	WeaponDamageEffect.Element = 'Acid';
	WeaponDamageEffect.AddShred = default.AcidCanister_Shred;
	WeaponDamageEffect.AddPierce = default.AcidCanister_Pierce;
	WeaponDamageEffect.Scalar = default.AcidCanister_Scalar;
	Template.AddMultiTargetEffect(WeaponDamageEffect);

	Template.AddMultiTargetEffect( class'X2StatusEffects'.static.CreateAcidBurningStatusEffect(default.AcidCanister_BurnDamage, default.AcidCanister_BurnSpread));
	Template.AddMultiTargetEffect( new class'X2Effect_ApplyAcidToWorld_Cone');

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.Canister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.Canister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	KnockbackEffect = new class'MZ_Effect_Knockback';
	KnockbackEffect.KnockbackDistance = class'X2Ability_Immolator'.default.PressureBlast_Knockback;
	KnockbackEffect.OnlyOnDeath = false;
	KnockbackEffect.bKnockbackDestroysNonFragile = true;
	Template.AddMultiTargetEffect(KnockbackEffect);

	Template.bCheckCollision = true;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireMZCanister';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Flamethrower';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 100;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.Hostility = eHostility_Offensive;

	return Template;
}



static function X2AbilityTemplate SmokeCanisterActivate()
{
	local X2AbilityTemplate					Template;
	local X2AbilityCharges                      Charges;
	local X2AbilityCost_Charges                 ChargeCost;
	local X2AbilityCost_ActionPoints		ActionPointCost;
	local X2AbilityTarget_Cursor			CursorTarget;
	local X2AbilityMultiTarget_Cone_LW			ConeMultiTarget;
	local X2AbilityCost_Ammo				AmmoCost;
	local X2Effect_ApplySmokeGrenadeToWorld WeaponEffect;
	local X2Condition_AbilityProperty		AbilityCondition;
	local X2Effect_ThermalBulwark			Effect;
	local X2Effect_Regeneration				RegenEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'LWSmokeCanisterActivate');

	Template.AbilitySourceName = 'eAbilitySource_Standard';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_CannotAfford_Charges');
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_smokebomb";
	Template.ShotHUDPriority = class'UIUtilities_Tactical'.const.STANDARD_SHOT_PRIORITY;
	Template.bDisplayInUITooltip = false;
	Template.bDisplayInUITacticalText = false;

	Charges = new class 'X2AbilityCharges';
	Charges.InitialCharges = default.SmokeCanister_Charges;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = false;
	Template.AbilityCosts.AddItem(ActionPointCost);

	AmmoCost = new class'X2AbilityCost_Ammo';
	AmmoCost.iAmmo = 1;
	Template.AbilityCosts.AddItem(AmmoCost);

	Template.AbilityToHitCalc = default.Deadeye;

	CursorTarget = new class'X2AbilityTarget_Cursor';
	CursorTarget.bRestrictToWeaponRange = true;
	Template.AbilityTargetStyle = CursorTarget;

	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter conditions
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.AddShooterEffectExclusions();

	//Template.AbilityMultiTargetConditions.AddItem(default.LivingTargetOnlyProperty);
	Template.AbilityMultiTargetConditions.AddItem(new class'X2Condition_FineControlDefensive');

	Template.bAllowBonusWeaponEffects = false;

	WeaponEffect = new class'X2Effect_ApplySmokeGrenadeToWorld';
	Template.AddMultiTargetEffect(WeaponEffect);
	Template.AddMultiTargetEffect(class'X2Item_DefaultGrenades'.static.SmokeGrenadeEffect());

	AbilityCondition = new class'X2Condition_AbilityProperty';
	AbilityCondition.OwnerHasSoldierAbilities.AddItem('LWMedicCanisterPassive');
	RegenEffect = new class'X2Effect_Regeneration';
	RegenEffect.BuildPersistentEffect(1, true, false, false, eGameRule_PlayerTurnBegin);
	RegenEffect.HealAmount = default.MedicCanister_PerTurnBuffRegen;
	RegenEffect.iNumTurns = default.MedicCanister_BuffRegenTurns;
	RegenEffect.EffectName = 'MedicCanister_RegenBuff';
	RegenEffect.SetDisplayInfo(ePerkBuff_Bonus, default.MedicCanisterBuffLabel, default.MedicCanisterBuffDesc, "img:///UILibrary_PerkIcons.UIPerk_defend_health", true, , Template.AbilitySourceName);
	RegenEffect.TargetConditions.AddItem(AbilityCondition);
	Template.AddMultiTargetEffect(RegenEffect);

	AbilityCondition = new class'X2Condition_AbilityProperty';
	AbilityCondition.OwnerHasSoldierAbilities.AddItem('LWThermalBulwark');
	Effect = new class'X2Effect_ThermalBulwark';
	Effect.BuildPersistentEffect(1, false, false, false, eGameRule_PlayerTurnBegin);
	Effect.DuplicateResponse = eDupe_Refresh;
	Effect.VisualizationFn = class'X2Ability_Immolator'.static.ThermalBVisualization;
	Effect.Chance = class'X2Ability_Immolator'.default.Fumigate_ThermalBulwark_Chance;
	Effect.SetDisplayInfo(ePerkBuff_Bonus, class'X2Ability_Immolator'.default.ThermalBEffectName, class'X2Ability_Immolator'.default.ThermalBEffectDesc, "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_deflectshot", true,,Template.AbilitySourceName);
	Effect.EffectName = 'LWThermalBulwark';
	Effect.TargetConditions.AddItem(AbilityCondition);
	Template.AddMultiTargetEffect( Effect );

	ConeMultiTarget = new class'X2AbilityMultiTarget_Cone_LW';
	ConeMultiTarget.bUseWeaponRadius = true;
	ConeMultiTarget.bIgnoreBlockingCover = true;
	ConeMultiTarget.ConeEndDiameter = default.SmokeCanister_Width * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.ConeLength = default.SmokeCanister_Length * class'XComWorldData'.const.WORLD_StepSize;
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleBsc', 2, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleAdv', 3, 0);
	ConeMultiTarget.AddBonusConeSize('LWWidthNozzleSup', 4, 0);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleBsc', 0, 1);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleAdv', 0, 2);
	ConeMultiTarget.AddBonusConeSize('LWLengthNozzleSup', 0, 3);
	Template.AbilityMultiTargetStyle = ConeMultiTarget;

	Template.bCheckCollision = false;
	Template.bAffectNeighboringTiles = true;
	Template.bFragileDamageOnly = false;

	Template.ActionFireClass =  class'X2Action_Fire_Flamethrower';
	Template.CustomFireAnim = 'FF_FireLWMedispray';

	Template.TargetingMethod = class'X2TargetingMethod_Cone';

	Template.ActivationSpeech = 'Flamethrower';
	Template.CinescriptCameraType = "Iridar_Flamethrower";

	Template.PostActivationEvents.AddItem('ChemthrowerActivated');
	Template.PostActivationEvents.AddItem('ChemthrowerCanisterActivated');

	Template.SuperConcealmentLoss = 0;

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.bFrameEvenWhenUnitIsHidden = true;

	Template.Hostility = eHostility_Defensive;

	return Template;
}
